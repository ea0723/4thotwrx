{"filter":false,"title":"conversion.rb","tooltip":"/app/models/conversion.rb","undoManager":{"mark":100,"position":100,"stack":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":77,"column":10},"end":{"row":77,"column":11}},"text":"d"},{"action":"removeText","range":{"start":{"row":77,"column":6},"end":{"row":77,"column":8}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":77,"column":6},"end":{"row":77,"column":9}},"text":"end"},{"action":"insertText","range":{"start":{"row":77,"column":6},"end":{"row":77,"column":13}},"text":"__END__"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":77,"column":12},"end":{"row":77,"column":13}},"text":"_"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":77,"column":11},"end":{"row":77,"column":12}},"text":"_"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":77,"column":10},"end":{"row":77,"column":11}},"text":"D"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":77,"column":9},"end":{"row":77,"column":10}},"text":"N"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":77,"column":8},"end":{"row":77,"column":9}},"text":"E"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":77,"column":7},"end":{"row":77,"column":8}},"text":"_"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":77,"column":6},"end":{"row":77,"column":7}},"text":"_"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":77,"column":4},"end":{"row":77,"column":6}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":77,"column":0},"end":{"row":77,"column":4}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":76,"column":77},"end":{"row":77,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":77,"column":2},"end":{"row":77,"column":4}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":77,"column":7},"end":{"row":78,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":78,"column":0},"end":{"row":78,"column":4}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":78,"column":4},"end":{"row":78,"column":5}},"text":"e"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":78,"column":5},"end":{"row":78,"column":6}},"text":"n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":78,"column":6},"end":{"row":78,"column":7}},"text":"d"},{"action":"removeText","range":{"start":{"row":78,"column":2},"end":{"row":78,"column":4}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":82,"column":29},"end":{"row":82,"column":30}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":82,"column":30},"end":{"row":82,"column":31}},"text":"t"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":82,"column":31},"end":{"row":82,"column":32}},"text":"h"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":82,"column":32},"end":{"row":82,"column":33}},"text":"e"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":82,"column":33},"end":{"row":82,"column":34}},"text":"n"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":82,"column":30},"end":{"row":82,"column":34}},"text":"then"},{"action":"insertText","range":{"start":{"row":82,"column":30},"end":{"row":82,"column":31}},"text":"="}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":82,"column":31},"end":{"row":82,"column":32}},"text":"="}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":82,"column":32},"end":{"row":82,"column":33}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":82,"column":33},"end":{"row":82,"column":34}},"text":"t"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":82,"column":34},"end":{"row":82,"column":35}},"text":"r"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":82,"column":35},"end":{"row":82,"column":36}},"text":"u"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":82,"column":36},"end":{"row":82,"column":37}},"text":"e"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":82,"column":31},"end":{"row":82,"column":32}},"text":"="}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":82,"column":31},"end":{"row":82,"column":32}},"text":"="}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":82,"column":4},"end":{"row":82,"column":6}},"text":"if"},{"action":"insertText","range":{"start":{"row":82,"column":4},"end":{"row":82,"column":5}},"text":"u"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":82,"column":5},"end":{"row":82,"column":6}},"text":"n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":82,"column":6},"end":{"row":82,"column":7}},"text":"l"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":82,"column":7},"end":{"row":82,"column":8}},"text":"e"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":82,"column":8},"end":{"row":82,"column":9}},"text":"s"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":82,"column":9},"end":{"row":82,"column":10}},"text":"s"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":82,"column":25},"end":{"row":82,"column":32}},"text":"Integer"},{"action":"insertText","range":{"start":{"row":82,"column":25},"end":{"row":82,"column":26}},"text":"s"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":82,"column":26},"end":{"row":82,"column":27}},"text":"t"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":82,"column":27},"end":{"row":82,"column":28}},"text":"r"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":82,"column":28},"end":{"row":82,"column":29}},"text":"i"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":82,"column":29},"end":{"row":82,"column":30}},"text":"n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":82,"column":30},"end":{"row":82,"column":31}},"text":"g"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":82,"column":25},"end":{"row":82,"column":26}},"text":"s"},{"action":"insertText","range":{"start":{"row":82,"column":25},"end":{"row":82,"column":26}},"text":"S"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":82,"column":32},"end":{"row":82,"column":40}},"text":" == true"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":107,"column":6},"end":{"row":107,"column":21}},"text":"self.credits = "},{"action":"insertText","range":{"start":{"row":107,"column":6},"end":{"row":107,"column":7}},"text":"e"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":107,"column":7},"end":{"row":107,"column":8}},"text":"r"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":107,"column":8},"end":{"row":107,"column":9}},"text":"r"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":107,"column":9},"end":{"row":107,"column":10}},"text":"o"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":107,"column":10},"end":{"row":107,"column":11}},"text":"r"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":107,"column":6},"end":{"row":107,"column":11}},"text":"error"},{"action":"insertText","range":{"start":{"row":107,"column":6},"end":{"row":107,"column":12}},"text":"errors"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":107,"column":12},"end":{"row":107,"column":13}},"text":"."}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":107,"column":12},"end":{"row":107,"column":13}},"text":"."}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":107,"column":12},"end":{"row":107,"column":13}},"text":"("}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":107,"column":12},"end":{"row":107,"column":13}},"text":"("}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":107,"column":12},"end":{"row":107,"column":13}},"text":"."}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":107,"column":13},"end":{"row":107,"column":14}},"text":"a"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":107,"column":13},"end":{"row":107,"column":14}},"text":"a"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":107,"column":13},"end":{"row":107,"column":14}},"text":"n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":107,"column":14},"end":{"row":107,"column":15}},"text":"e"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":107,"column":15},"end":{"row":107,"column":16}},"text":"w"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":107,"column":15},"end":{"row":107,"column":16}},"text":"w"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":107,"column":14},"end":{"row":107,"column":15}},"text":"e"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":107,"column":13},"end":{"row":107,"column":14}},"text":"n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":107,"column":13},"end":{"row":107,"column":14}},"text":"a"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":107,"column":14},"end":{"row":107,"column":15}},"text":"d"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":107,"column":15},"end":{"row":107,"column":16}},"text":"d"}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":0,"column":0},"end":{"row":113,"column":0}},"nl":"\n","lines":["class Conversion < ActiveRecord::Base","","  validates_presence_of :convert_me, presence: true, length: { maximum: 100 }","  validate :input_valid","  validate :clean_it_up","  validate :map_it","  validate :calculate_it","  ","  @units = []","  @metals = 1","","","# Step 1) validate that the input contains nothing outside the accepted input to nullify calculation if not necessary","  def input_valid","    self.convert_me do","      unless self.convert_me.match(/glob|prok|pish|tegj|(how much is)|(how many credits is)|(\\sis\\s\\d+\\scredits\\z)/i) ","        errors.add_on_empty(:convert_me, 'I have no idea what you are talking about')","      end","    end","  end","","# Step2) clean up the string for conversion","","  # start by remove any ending spaces and punctuation","  def clean_it_up","    self.convert_me.downcase!","    if self.convert_me.match(/\\?\\s*$/)","      self.convert_me.chop!","      puts(\"here's the string --> #{convert_me}\")","    end","    # next, remove any leading or tailing strings","    if self.convert_me.scan(/\\A(how many credits is\\s)/i)","      self.convert_me.gsub!(/\\A(how many credits is\\s)/i, '')","      puts(\"here's the simplified string for splitting --> #{convert_me}\")","    end","    if self.convert_me.scan(/\\A(how much is\\s)/i)","      self.convert_me.gsub!(/\\A(how much is\\s)/i, '')","      puts(\"here's the simplified string for splitting --> #{convert_me}\")","    end","    if self.convert_me.scan(/(is \\d+ credits)\\z/i)","      self.convert_me.gsub!(/(is \\d+ credits)\\z/i, '')","      puts(\"here's the simplified string for splitting --> #{convert_me}\")","    end","    if self.convert_me.match(/\\A(glob is I)|(prok is V)|(pish is X)|(tegj is L)/i)","      # self.convert_me.gsub!(/\\A\\sis\\s./i, '')","      self.credits = \"True\"","      puts(\"here's the simplified string for splitting --> #{convert_me}\")","    end","    # finally, convert input string to an array","    @units = convert_me.split(\" \")","    puts(\"Here's the split string --> #{@units}\")","  end","","","# Step 3) strip any leading words if they got through step 2. Map the units to Roman Numerals or integer for ease of assessment. Break out the metals. Convert to integers","  def map_it","    if @units[1] == 'is' && self.credits = nil then @units.pop(2)","    end","    unless self.credits == \"True\" ","      @units.map! { |a|","        if a == 'glob' then a = 'I'","        elsif a == 'prok' then a = 'V'","        elsif a == 'pish' then a = 'X'","        elsif a == 'tegj' then a = 'L'","        elsif a == 'gold' then a = 14450","        elsif a == 'iron' then a = 195.50","        elsif a == 'silver' then a = 17","        # return an error as a backup if anything got through the validation","        else","          self.credits = \"I have no idea what you are talking about\"","        end","      }","    # separate out the \"metals\" for multiplication - ensure that those calculations without metals works","      @units.length <= 1 || @units[-1].is_a?(String) ? @metals = 1 : @metals = @units.pop","        puts(\"this is the metals --> #{@metals}\")","      @joined = @units.join('')","        puts(\"this is the joined array for final calculation --> #{@joined}\")","    end","  end","","","  def calculate_it","    unless @metals.is_a?(String)","      @total = 0","      @add = 0","        puts(\"within calculate_it, this is the starting total --> #{@total}\")","    # convert units from roman numerals to integers & multiply by metals to get final credit amount. Raise exception if invalid numeral pair","        until @joined.empty? do","          case","            when @joined.start_with?('L') then @add += 50; len = 1","            when @joined.start_with?('XL') then @add += 40; len = 2","            when @joined.start_with?('X') then @add += 10; len = 1","            when @joined.start_with?('IX') then @add += 9; len = 2","            when @joined.start_with?('V') then @add += 5; len = 1","            when @joined.start_with?('IV') then @add += 4; len = 2","            when @joined.start_with?('I') then @add += 1; len = 1","            else","              @add = 0","          end","          @joined.slice!(0, len)","        end","      puts(\"i have added a value --> #{@add}\")","      @total += @add","      @total *= @metals","        puts(\"the total is now --> #{@total}\")","      self.credits = @total","    else","      errors.add\"I have no idea what you are talking about\"","    end","  end","","end",""]},{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":37}},"text":"class Conversion < ActiveRecord::Base"},{"action":"insertText","range":{"start":{"row":0,"column":37},"end":{"row":1,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":1,"column":0},"end":{"row":149,"column":0}},"lines":["","  validates_presence_of :convert_me, presence: true, length: { maximum: 100 }","  validate :input_valid","  after_validation :clean_it_up, :simplify_for_conversion","  before_create :map_it, :calculate_it","","  # how many credits is xxx xxx xxx","  # how much is xxx xxx xxx","  # xxx is I || V || X || L  if {'glob' => 'I', 'prok' => 'V', 'pish'=> 'X', 'tegj' => 'L' } pass; else, fail","  # xxx xxx xxx xxx is \\d+ credits","  # xxx xxx xxx xxx","","  @units = []","  @metals = 1","","  VALID_MATCH_WORDS = ['glob', 'prok', 'pish', 'tegj', 'iron', 'silver', 'gold']","","  def question_how_many(question=\"\")","    extract_invalid_words($1) if question.match(/^how many credits is (.+?)$/i)","  end","","  def question_how_much(question=\"\")","    extract_invalid_words($1) if question.match(/^how much is (.+)$/i)","  end","","  def unit_is_value(question=\"\")","    extract_invalid_words($1) if question.match(/^\\w+? is (\\w)$/i)","    logger.info \"!!!!!!! the input passed is --> #{question} the match is --> #{$2} \"","  end","","  def units_plus_credits(question=\"\")","    extract_invalid_words($1) if question.match(/^(.+?) is \\d+ credits$/i)","    logger.info \"!!!!!!!!!!!!!!!!! units_plus_credits line 32 activated! Words is question.split --> #{question.split} \"","  end","","  def units_only(question=\"\")","    words = question.split","    words.delete_if { |word| !VALID_MATCH_WORDS.include?(word) }","    logger.info \"!!!!!!!!!!!!!!!!! units_only line 36 activated! Words is question.split --> #{words} with length #{words.length}, question.split: #{question.split} with length #{question.split.length}\"","    words.length == question.split.length ? words : nil","  end","","","","# Step 1) validate that the input contains nothing outside the accepted input to nullify calculation if not necessary","  def input_valid","    matched_words = question_how_many(self.convert_me) || question_how_much(self.convert_me) || unit_is_value(self.convert_me) || units_plus_credits(self.convert_me) || units_only(self.convert_me)","","    logger.info \"!!!! matched_words: #{matched_words.ai}\"","","    errors.add(:convert_me, \"You have offended my babel fish, I have no idea what you're talking about\") if matched_words.nil? || matched_words == []","  end","","# Step2) clean up the string for conversion","","# start by remove any ending spaces and punctuation","  def clean_it_up","    self.convert_me.downcase!","    self.convert_me.strip!","    if self.convert_me.match(/\\?$/)","      self.convert_me.chop!","      puts(\"here's the string after clean_it_up --> #{convert_me}\")","    end","  end","","\tdef simplify_for_conversion","    # next, remove any leading or tailing strings","      self.convert_me.gsub!(/\\A(how many credits is\\s)/i, '')","        puts(\"gsub for how many credits is returns this simplified string for splitting --> #{convert_me}\")","      self.convert_me.gsub!(/\\A(how much is\\s)/i, '')","        puts(\"gsub for --> how much is <-- returns this simplified string for splitting --> #{convert_me}\")","      self.convert_me.gsub!(/(is \\d+ credits)\\z/i, '')","        puts(\"gsub for --> is X credits <-- returns this simplified string for splitting --> #{convert_me}\")","      if self.convert_me.match(/^(glob is I)|(prok is V)|(pish is X)|(tegj is L)/i)","\t      self.convert_me.gsub!(/\\sis \\w$/i, '')","      end","      # self.credits = \"True\"","      puts(\"here's the simplified string for splitting --> #{convert_me}\")","    # finally, convert input string to an array","    @units = convert_me.strip.split(\" \")","    puts(\"Here's the split string after simplify_for_conversion --> #{@units}\")","  end","","","# Step 3) strip any leading words if they got through step 2. Map the units to Roman Numerals or integer for ease of assessment. Break out the metals. Convert to integers","  def map_it","    if @units[1] == 'is'","\t    @units.pop(2)","      puts(\"here are the units to map --> #{@units}\")","    end","    # unless self.credits == \"True\"","      @units.map! { |a|","        if a == 'glob' then a = 'I'","        elsif a == 'prok' then a = 'V'","        elsif a == 'pish' then a = 'X'","        elsif a == 'tegj' then a = 'L'","        elsif a == 'gold' then a = 14450","        elsif a == 'iron' then a = 195.50","        elsif a == 'silver' then a = 17","          # return an error as a backup if anything got through the validation","        else","\t        @units = []","        end","      }","      # separate out the \"metals\" for multiplication - ensure that those calculations without metals works","        puts(\"this is the final units --> #{@units}\")","      @units.length <= 1 || @units[-1].is_a?(String) || @units.empty? ? @metals = 1 : @metals = @units.pop","      puts(\"this is the metals --> #{@metals}\")","      @joined = @units.join('')","      puts(\"this is the joined array for final calculation --> #{@joined}\")","    end","","","  def calculate_it","    @total = 0","    @add = 0","      puts(\"this is the starting total --> #{@total}\")","  # convert units from roman numerals to integers & multiply by metals to get final credit amount. Raise exception if invalid numeral pair","      until @joined.empty? do","        case","          when @joined.start_with?('L') then @add += 50; len = 1","          when @joined.start_with?('XL') then @add += 40; len = 2","          when @joined.start_with?('X') then @add += 10; len = 1","          when @joined.start_with?('IX') then @add += 9; len = 2","          when @joined.start_with?('V') then @add += 5; len = 1","          when @joined.start_with?('IV') then @add += 4; len = 2","          when @joined.start_with?('I') then @add += 1; len = 1","          else","            @add = 0","        end","        @joined.slice!(0, len)","      end","      puts(\"i have added a value --> #{@add}\")","      @total += @add","      @total *= @metals","      puts(\"the total is now --> #{@total}\")","      self.credits = @total","  end","","  private","  def extract_invalid_words(sentence=\"\")","    words = sentence.split","    words.delete_if { |word| !VALID_MATCH_WORDS.include?(word) }","    words.count > 0 ? words : nil","  end","","end",""]}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":49,"column":52},"end":{"row":49,"column":55}},"text":".ai"}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":0,"column":0},"end":{"row":149,"column":0}},"nl":"\n","lines":["class Conversion < ActiveRecord::Base","","  validates_presence_of :convert_me, presence: true, length: { maximum: 100 }","  validate :input_valid","  after_validation :clean_it_up, :simplify_for_conversion","  before_create :map_it, :calculate_it","","  # how many credits is xxx xxx xxx","  # how much is xxx xxx xxx","  # xxx is I || V || X || L  if {'glob' => 'I', 'prok' => 'V', 'pish'=> 'X', 'tegj' => 'L' } pass; else, fail","  # xxx xxx xxx xxx is \\d+ credits","  # xxx xxx xxx xxx","","  @units = []","  @metals = 1","","  VALID_MATCH_WORDS = ['glob', 'prok', 'pish', 'tegj', 'iron', 'silver', 'gold']","","  def question_how_many(question=\"\")","    extract_invalid_words($1) if question.match(/^how many credits is (.+?)$/i)","  end","","  def question_how_much(question=\"\")","    extract_invalid_words($1) if question.match(/^how much is (.+)$/i)","  end","","  def unit_is_value(question=\"\")","    extract_invalid_words($1) if question.match(/^\\w+? is (\\w)$/i)","    logger.info \"!!!!!!! the input passed is --> #{question} the match is --> #{$2} \"","  end","","  def units_plus_credits(question=\"\")","    extract_invalid_words($1) if question.match(/^(.+?) is \\d+ credits$/i)","    logger.info \"!!!!!!!!!!!!!!!!! units_plus_credits line 32 activated! Words is question.split --> #{question.split} \"","  end","","  def units_only(question=\"\")","    words = question.split","    words.delete_if { |word| !VALID_MATCH_WORDS.include?(word) }","    logger.info \"!!!!!!!!!!!!!!!!! units_only line 36 activated! Words is question.split --> #{words} with length #{words.length}, question.split: #{question.split} with length #{question.split.length}\"","    words.length == question.split.length ? words : nil","  end","","","","# Step 1) validate that the input contains nothing outside the accepted input to nullify calculation if not necessary","  def input_valid","    matched_words = question_how_many(self.convert_me) || question_how_much(self.convert_me) || unit_is_value(self.convert_me) || units_plus_credits(self.convert_me) || units_only(self.convert_me)","","    logger.info \"!!!! matched_words: #{matched_words}\"","","    errors.add(:convert_me, \"You have offended my babel fish, I have no idea what you're talking about\") if matched_words.nil? || matched_words == []","  end","","# Step2) clean up the string for conversion","","# start by remove any ending spaces and punctuation","  def clean_it_up","    self.convert_me.downcase!","    self.convert_me.strip!","    if self.convert_me.match(/\\?$/)","      self.convert_me.chop!","      puts(\"here's the string after clean_it_up --> #{convert_me}\")","    end","  end","","\tdef simplify_for_conversion","    # next, remove any leading or tailing strings","      self.convert_me.gsub!(/\\A(how many credits is\\s)/i, '')","        puts(\"gsub for how many credits is returns this simplified string for splitting --> #{convert_me}\")","      self.convert_me.gsub!(/\\A(how much is\\s)/i, '')","        puts(\"gsub for --> how much is <-- returns this simplified string for splitting --> #{convert_me}\")","      self.convert_me.gsub!(/(is \\d+ credits)\\z/i, '')","        puts(\"gsub for --> is X credits <-- returns this simplified string for splitting --> #{convert_me}\")","      if self.convert_me.match(/^(glob is I)|(prok is V)|(pish is X)|(tegj is L)/i)","\t      self.convert_me.gsub!(/\\sis \\w$/i, '')","      end","      # self.credits = \"True\"","      puts(\"here's the simplified string for splitting --> #{convert_me}\")","    # finally, convert input string to an array","    @units = convert_me.strip.split(\" \")","    puts(\"Here's the split string after simplify_for_conversion --> #{@units}\")","  end","","","# Step 3) strip any leading words if they got through step 2. Map the units to Roman Numerals or integer for ease of assessment. Break out the metals. Convert to integers","  def map_it","    if @units[1] == 'is'","\t    @units.pop(2)","      puts(\"here are the units to map --> #{@units}\")","    end","    # unless self.credits == \"True\"","      @units.map! { |a|","        if a == 'glob' then a = 'I'","        elsif a == 'prok' then a = 'V'","        elsif a == 'pish' then a = 'X'","        elsif a == 'tegj' then a = 'L'","        elsif a == 'gold' then a = 14450","        elsif a == 'iron' then a = 195.50","        elsif a == 'silver' then a = 17","          # return an error as a backup if anything got through the validation","        else","\t        @units = []","        end","      }","      # separate out the \"metals\" for multiplication - ensure that those calculations without metals works","        puts(\"this is the final units --> #{@units}\")","      @units.length <= 1 || @units[-1].is_a?(String) || @units.empty? ? @metals = 1 : @metals = @units.pop","      puts(\"this is the metals --> #{@metals}\")","      @joined = @units.join('')","      puts(\"this is the joined array for final calculation --> #{@joined}\")","    end","","","  def calculate_it","    @total = 0","    @add = 0","      puts(\"this is the starting total --> #{@total}\")","  # convert units from roman numerals to integers & multiply by metals to get final credit amount. Raise exception if invalid numeral pair","      until @joined.empty? do","        case","          when @joined.start_with?('L') then @add += 50; len = 1","          when @joined.start_with?('XL') then @add += 40; len = 2","          when @joined.start_with?('X') then @add += 10; len = 1","          when @joined.start_with?('IX') then @add += 9; len = 2","          when @joined.start_with?('V') then @add += 5; len = 1","          when @joined.start_with?('IV') then @add += 4; len = 2","          when @joined.start_with?('I') then @add += 1; len = 1","          else","            @add = 0","        end","        @joined.slice!(0, len)","      end","      puts(\"i have added a value --> #{@add}\")","      @total += @add","      @total *= @metals","      puts(\"the total is now --> #{@total}\")","      self.credits = @total","  end","","  private","  def extract_invalid_words(sentence=\"\")","    words = sentence.split","    words.delete_if { |word| !VALID_MATCH_WORDS.include?(word) }","    words.count > 0 ? words : nil","  end","","end",""]},{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":37}},"text":"class Conversion < ActiveRecord::Base"},{"action":"insertText","range":{"start":{"row":0,"column":37},"end":{"row":1,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":1,"column":0},"end":{"row":130,"column":0}},"lines":["","  validates_presence_of :convert_me, presence: true, length: { maximum: 100 }","  validate :input_valid","  after_validation :clean_it_up, :simplify_for_conversion","  before_create :map_it, :calculate_it","","  # how many credits is xxx xxx xxx","  # how much is xxx xxx xxx","  # xxx is I || V || X || L  if {'glob' => 'I', 'prok' => 'V', 'pish'=> 'X', 'tegj' => 'L' } pass; else, (e.g. glob != I ) error","  # xxx xxx xxx xxx is \\d+ credits","  # xxx xxx xxx xxx","  # anything but valid match words","","  @units = []","  @metals = 1","","  VALID_MATCH_WORDS = ['glob', 'prok', 'pish', 'tegj', 'iron', 'silver', 'gold']","  MATCH_UNITS = { 'glob' => 'I', 'prok' => 'V', 'pish' => 'X', 'tegj' => 'L', 'gold' => 14450, 'iron' => 195.50, 'silver' => 17}","  # ROMAN_NUMERAL_VALUES = { 'L' => 50, 'XL' => 40, 'X' => 10, 'IX' => 9, 'V' => 5, 'IV' => 4, 'I' => 1 }","","  def question_how_many(question=\"\")","\t  extract_invalid_words($1) if question.match(/^how many credits is (.+?)$/i)","  end","","  def question_how_much(question=\"\")","\t  extract_invalid_words($1) if question.match(/^how much is (.+)$/i)","  end","","  def unit_is_value(question=\"\")","\t  extract_invalid_words($1) if question.match(/^(\\w+?) is \\w\\s?$/i)","  end","","  def units_plus_credits(question=\"\")","    extract_invalid_words($1) if question.match(/^(.+?) is \\d+ credits$/i)","  end","","  def units_only(question=\"\")","\t  words = question.split","    words.delete_if { |word| !VALID_MATCH_WORDS.include?(word) }","    words.length == question.split.length ? words : nil","  end","","","","# Step 1) validate that the input contains nothing outside the accepted input to nullify calculation if not necessary","  def input_valid","    matched_words = question_how_many(self.convert_me) || question_how_much(self.convert_me) || unit_is_value(self.convert_me) || units_plus_credits(self.convert_me) || units_only(self.convert_me)","","    logger.info \"********** input_valid response ---> matched_words: #{matched_words} **********\"","","    errors.add(:convert_me, \"You have offended my babel fish, I have no idea what you're talking about\") if matched_words.nil? || matched_words == []","  end","","# Step2) clean up the string for conversion","","# start by remove any ending spaces and punctuation","  def clean_it_up","    self.convert_me.downcase!","    self.convert_me.strip!","    if self.convert_me.match(/\\?$/)","      self.convert_me.chop!","      logger.info \"here's the string after clean_it_up --> #{convert_me}\"","    end","  end","","\tdef simplify_for_conversion # next, remove any leading or tailing strings","      self.convert_me.gsub!(/how many credits is\\s/i, '')","      self.convert_me.gsub!(/how much is\\s/i, '')","      self.convert_me.gsub!(/\\sis \\d+ credits/i, '')","      if self.convert_me.match(/^(glob is I)|(prok is V)|(pish is X)|(tegj is L)/i)","\t      self.convert_me.gsub!(/\\sis \\w$/i, '')","      end","      puts(\"here's the simplified string after any gsub ready to split --> #{convert_me}\")","    @units = self.convert_me.strip.split(\" \")","     puts(\"Here's the array after simplify_for_conversion --> #{@units}\")","  end","","","# Step 3) strip any leading words if they got through step 2. Map the units to Roman Numerals or integer for ease of assessment. Break out the metals. Convert to integers","  def map_it","    if @units[1] == 'is'","\t    @units.pop(2)","      puts(\"here are the units to map --> #{@units}\")","    end","    # unless self.credits == \"True\"","      @units.map! { |a| MATCH_UNITS[a] }","      # separate out the \"metals\" for multiplication - ensure that those calculations without metals works","      @units.length <= 1 || @units[-1].is_a?(String) || @units.empty? ? @metals = 1 : @metals = @units.pop","      puts(\"this is the metals --> #{@metals}\")","      @joined = @units.join('')","      puts(\"this is the joined array for final calculation --> #{@joined}\")","    end","","","  def calculate_it","    total = 0","    add = 0","      puts(\"this is the starting total --> #{@total}\")","  # convert units from roman numerals to integers & multiply by metals to get final credit amount. Raise exception if invalid numeral pair","      until @joined.empty? do","        case","          when @joined.start_with?('L') then @add += 50; len = 1","          when @joined.start_with?('XL') then @add += 40; len = 2","          when @joined.start_with?('X') then @add += 10; len = 1","          when @joined.start_with?('IX') then @add += 9; len = 2","          when @joined.start_with?('V') then @add += 5; len = 1","          when @joined.start_with?('IV') then @add += 4; len = 2","          when @joined.start_with?('I') then @add += 1; len = 1","          else","            @add = 0","        end","        @joined.slice!(0, len)","      end","      puts(\"i have added a value --> #{@add}\")","      @total += @add","      @total *= @metals","      puts(\"the total is now --> #{@total}\")","      self.credits = @total","  end","","  private","  def extract_invalid_words(sentence=\"\")","    words = sentence.split","    words.delete_if { |word| !VALID_MATCH_WORDS.include?(word) }","    words.count > 0 ? words : nil","  end","","end",""]}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":12,"column":0},"end":{"row":12,"column":34}},"text":"  # anything but valid match words"},{"action":"removeLines","range":{"start":{"row":6,"column":0},"end":{"row":12,"column":0}},"nl":"\n","lines":["","  # how many credits is xxx xxx xxx","  # how much is xxx xxx xxx","  # xxx is I || V || X || L  if {'glob' => 'I', 'prok' => 'V', 'pish'=> 'X', 'tegj' => 'L' } pass; else, (e.g. glob != I ) error","  # xxx xxx xxx xxx is \\d+ credits","  # xxx xxx xxx xxx"]}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":5,"column":38},"end":{"row":6,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":38,"column":0},"end":{"row":38,"column":117}},"text":"# Step 1) validate that the input contains nothing outside the accepted input to nullify calculation if not necessary"}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":37,"column":0},"end":{"row":38,"column":0}},"nl":"\n","lines":[""]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":36,"column":0},"end":{"row":37,"column":0}},"nl":"\n","lines":[""]}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":47,"column":0},"end":{"row":47,"column":51}},"text":"# start by remove any ending spaces and punctuation"},{"action":"removeLines","range":{"start":{"row":45,"column":0},"end":{"row":47,"column":0}},"nl":"\n","lines":["# Step2) clean up the string for conversion",""]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":44,"column":0},"end":{"row":45,"column":0}},"nl":"\n","lines":[""]}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":44,"column":0},"end":{"row":45,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":40,"column":0},"end":{"row":40,"column":97}},"text":"    logger.info \"********** input_valid response ---> matched_words: #{matched_words} **********\""}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":39,"column":0},"end":{"row":40,"column":0}},"nl":"\n","lines":[""]}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":38,"column":196},"end":{"row":39,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":38,"column":196},"end":{"row":39,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":48,"column":0},"end":{"row":48,"column":73}},"text":"      logger.info \"here's the string after clean_it_up --> #{convert_me}\""}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":47,"column":27},"end":{"row":48,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":100,"column":6},"end":{"row":100,"column":7}},"text":"@"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":101,"column":6},"end":{"row":101,"column":7}},"text":"@"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":99,"column":6},"end":{"row":99,"column":8}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":102,"column":6},"end":{"row":102,"column":8}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":103,"column":21},"end":{"row":103,"column":22}},"text":"@"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":87,"column":45},"end":{"row":87,"column":46}},"text":"@"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":88,"column":46},"end":{"row":88,"column":47}},"text":"@"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":89,"column":45},"end":{"row":89,"column":49}},"text":"@add"},{"action":"insertText","range":{"start":{"row":89,"column":45},"end":{"row":89,"column":48}},"text":"add"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":90,"column":46},"end":{"row":90,"column":50}},"text":"@add"},{"action":"insertText","range":{"start":{"row":90,"column":46},"end":{"row":90,"column":49}},"text":"add"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":91,"column":45},"end":{"row":91,"column":49}},"text":"@add"},{"action":"insertText","range":{"start":{"row":91,"column":45},"end":{"row":91,"column":48}},"text":"add"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":92,"column":46},"end":{"row":92,"column":50}},"text":"@add"},{"action":"insertText","range":{"start":{"row":92,"column":46},"end":{"row":92,"column":49}},"text":"add"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":93,"column":45},"end":{"row":93,"column":49}},"text":"@add"},{"action":"insertText","range":{"start":{"row":93,"column":45},"end":{"row":93,"column":48}},"text":"add"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":95,"column":12},"end":{"row":95,"column":16}},"text":"@add"},{"action":"insertText","range":{"start":{"row":95,"column":12},"end":{"row":95,"column":15}},"text":"add"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":99,"column":41},"end":{"row":99,"column":45}},"text":"@add"},{"action":"insertText","range":{"start":{"row":99,"column":41},"end":{"row":99,"column":44}},"text":"add"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":100,"column":15},"end":{"row":100,"column":19}},"text":"@add"},{"action":"insertText","range":{"start":{"row":100,"column":15},"end":{"row":100,"column":18}},"text":"add"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":102,"column":37},"end":{"row":102,"column":43}},"text":"@total"},{"action":"insertText","range":{"start":{"row":102,"column":37},"end":{"row":102,"column":42}},"text":"total"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":83,"column":45},"end":{"row":83,"column":51}},"text":"@total"},{"action":"insertText","range":{"start":{"row":83,"column":45},"end":{"row":83,"column":50}},"text":"total"}]}]]},"ace":{"folds":[],"scrolltop":1120.5,"scrollleft":0,"selection":{"start":{"row":14,"column":2},"end":{"row":49,"column":5},"isBackwards":true},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1415692788094,"hash":"b796477e157d44ba2db77ba5ecf6a37bd9e3225f"}